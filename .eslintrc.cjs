module.exports = {
  parser: '@typescript-eslint/parser',
  env: {
    es6: true,
    browser: true,
    node: true,
    jest: true,
  },
  // Installed plugins that allow additional rules
  plugins: ['import', 'react', 'react-hooks', 'react-refresh'],
  // Extention of the schema of rules from other sources
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
  ],
  // rules that are added manually
  rules: {
    'no-unexpected-multiline': 'error',
    'no-unused-vars': [
      'warn',
      {
        args: 'after-used',
        ignoreRestSiblings: true,
        varsIgnorePattern: '^(?:_.*|Debug)$',
        argsIgnorePattern: '^(?:_.*)$',
      },
    ],
    'react/react-in-jsx-scope': 'off',
    'no-prototype-builtins': 'off',
    'no-useless-escape': 'off',
    'react/display-name': 'off',
    'react/prop-types': 'warn',
    'react/jsx-key': 'warn',
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'off',
    // "react-refresh/only-export-components": ["warn", { "checkJS": true }],
    'no-multi-spaces': 'error',
    'object-curly-spacing': ['error', 'always'],
    quotes: ['error', 'single', { avoidEscape: true }],
    'max-depth': ['warn', 5],
    'max-nested-callbacks': ['warn', 5],
    eqeqeq: 'error',
    'space-infix-ops': ['error', { int32Hint: false }],
    'key-spacing': ['error', { afterColon: true }],
    'space-in-parens': ['error', 'never'],
    'eol-last': ['error', 'always'],
    'array-callback-return': 'error',
    'no-compare-neg-zero': 'error',
    'no-cond-assign': 'warn',
    'no-const-assign': 'error',
    // "no-constant-binary-expression": "warn", This rule was introduced in ESLint v8.14.0
    'no-constant-condition': 'warn',
    'no-dupe-else-if': 'error',
    'no-dupe-args': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-duplicate-imports': 'error',
    'no-empty-pattern': 'warn',
    'no-fallthrough': 'error',
    'no-import-assign': 'error',
    'no-invalid-regexp': 'warn',
    'no-obj-calls': 'error',
    'no-template-curly-in-string': 'warn',
    'no-undef': 'error',
    'no-unreachable': 'error',
    'no-unsafe-finally': 'error',
    'no-unsafe-optional-chaining': 'warn',
    'use-isnan': 'warn',
    'no-useless-backreference': 'error',
    'valid-typeof': ['error', { requireStringLiterals: true }],
    'block-scoped-var': 'error',
    camelcase: ['warn', { properties: 'never' }],
    'consistent-return': ['error', { treatUndefinedAsUnspecified: false }],
    curly: ['warn', 'multi-or-nest', 'consistent'],
    'default-case': 'error',
    'default-case-last': 'error',
    'default-param-last': 'warn',
    'init-declarations': ['error', 'always'],
    'max-lines': ['error', 1000],
    'max-lines-per-function': ['warn', { max: 1000, skipBlankLines: true, skipComments: true }],
    'max-params': ['warn', 5],
    'new-cap': 'error',
    'no-alert': 'error',
    'no-case-declarations': 'error',
    'no-console': 'error',
    'no-continue': 'error',
    'prefer-spread': 'warn',
    'prefer-rest-params': 'warn',
    'prefer-promise-reject-errors': 'error',
    'prefer-object-spread': 'warn',
    'prefer-const': 'warn',
    'prefer-arrow-callback': 'error',
    'no-var': 'error',
    'no-useless-return': 'warn',
    'no-useless-concat': 'error',
    'no-useless-catch': 'warn',
    'no-useless-call': 'error',
    'no-unused-labels': 'error',
    'no-unused-expressions': 'error',
    'no-unneeded-ternary': 'error',
    'no-shadow-restricted-names': 'error',
    'no-shadow': [
      'warn',
      {
        builtinGlobals: false,
        hoist: 'functions',
        allow: [],
      },
    ],
    'no-sequences': 'error',
    'no-return-assign': ['error', 'except-parens'],
    'no-redeclare': 'error',
    'no-new-func': 'error',
    'no-multi-assign': 'error',
    // "no-magic-numbers": ["warn", { "ignoreArrayIndexes": true }],
    'no-loop-func': 'error',
    'no-lonely-if': 'error',
    'no-lone-blocks': 'error',
    'no-iterator': 'error',
    'no-extend-native': 'error',
    'no-eval': 'error',
    // "no-empty-static-block": "warn", can be enabled after version v8.27.0
    'no-empty-function': 'warn',
    'no-empty': ['error', { allowEmptyCatch: true }],
    'no-else-return': 'warn',
    semi: ['error', 'always'],
    '@typescript-eslint/no-unused-vars': 'off',
  },
  // Below you can set Node globals that eslint misses so linter works withoute showing errors
  globals: {
    structuredClone: 'readonly',
  },
  // Specifies in what paths these eslint rules are applied
  // ignorePatterns: ['!/src'],
  settings: {
    react: {
      version: '16.0',
    },
    // import-resolver-plugin that allows eslint to resolve without errors paths starting without ./
    'import/resolver': {
      alias: {
        map: [
          ['assets', './src/assets'],
          ['common', './src/common'],
          ['components', './src/components'],
          ['config', './src/config'],
          ['routes', './src/routes'],
          ['utils', './src/utils'],
        ],
        extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
      },
    },
  },
};
